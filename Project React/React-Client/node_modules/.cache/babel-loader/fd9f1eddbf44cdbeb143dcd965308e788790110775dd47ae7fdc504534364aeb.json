{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gongg\\\\my-app\\\\Project React\\\\React-Client\\\\src\\\\components\\\\APIgoogle.jsx\",\n  _s = $RefreshSig$();\n// GoogleMap.jsx\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: '100%',\n  height: '400px'\n};\nconst center = {\n  lat: 0,\n  // Set to your default latitude\n  lng: 0 // Set to your default longitude\n};\nconst GoogleMapComponent = () => {\n  _s();\n  const [shops, setShops] = useState([]);\n  useEffect(() => {\n    // Fetch data from your Node.js backend using the fetch function\n    fetch('http://localhost:3004/shops').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => setShops(data)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAjKkYqxRTixO9xOe3R6UIULNMQyU7sUGo\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: center,\n      zoom: 10,\n      children: shops.map(shop => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: shop.lat,\n          lng: shop.lng\n        }\n        // Customize marker as needed\n        ,\n        icon: {\n          url: 'path-to-your-marker-image.png',\n          scaledSize: new window.google.maps.Size(30, 30)\n        }\n      }, shop.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMapComponent, \"AGMboizx9feJkEUMFKJSK0/MHWk=\");\n_c = GoogleMapComponent;\nexport default GoogleMapComponent;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapComponent\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","mapContainerStyle","width","height","center","lat","lng","GoogleMapComponent","_s","shops","setShops","fetch","then","response","ok","Error","json","data","catch","error","console","googleMapsApiKey","children","zoom","map","shop","position","icon","url","scaledSize","window","google","maps","Size","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gongg/my-app/Project React/React-Client/src/components/APIgoogle.jsx"],"sourcesContent":["// GoogleMap.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\n\r\nconst mapContainerStyle = {width: '100%',height: '400px',};\r\n\r\nconst center = {\r\n  lat: 0, // Set to your default latitude\r\n  lng: 0, // Set to your default longitude\r\n};\r\n\r\nconst GoogleMapComponent = () => {\r\n  const [shops, setShops] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from your Node.js backend using the fetch function\r\n    fetch('http://localhost:3004/shops')\r\n        .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n    })\r\n        .then(data => setShops(data))\r\n        .catch(error => console.error('Error fetching data:', error));}, []);\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"AIzaSyAjKkYqxRTixO9xOe3R6UIULNMQyU7sUGo\">\r\n    <GoogleMap mapContainerStyle={mapContainerStyle} center={center} zoom={10}>\r\n        {shops.map(shop => (\r\n        <Marker\r\n            key={shop.id}\r\n            position={{ lat: shop.lat, lng: shop.lng }}\r\n            // Customize marker as needed\r\n            icon={{ url: 'path-to-your-marker-image.png', scaledSize: new window.google.maps.Size(30, 30) }}\r\n          />\r\n        ))}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default GoogleMapComponent;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,iBAAiB,GAAG;EAACC,KAAK,EAAE,MAAM;EAACC,MAAM,EAAE;AAAQ,CAAC;AAE1D,MAAMC,MAAM,GAAG;EACbC,GAAG,EAAE,CAAC;EAAE;EACRC,GAAG,EAAE,CAAC,CAAE;AACV,CAAC;AAED,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACAgB,KAAK,CAAC,6BAA6B,CAAC,CAC/BC,IAAI,CAACC,QAAQ,IAAI;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACGJ,IAAI,CAACK,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC,CAC5BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EAAC,CAAC,EAAE,EAAE,CAAC;EAE1E,oBACEnB,OAAA,CAACH,UAAU;IAACwB,gBAAgB,EAAC,yCAAyC;IAAAC,QAAA,eACtEtB,OAAA,CAACJ,SAAS;MAACK,iBAAiB,EAAEA,iBAAkB;MAACG,MAAM,EAAEA,MAAO;MAACmB,IAAI,EAAE,EAAG;MAAAD,QAAA,EACrEb,KAAK,CAACe,GAAG,CAACC,IAAI,iBACfzB,OAAA,CAACF,MAAM;QAEH4B,QAAQ,EAAE;UAAErB,GAAG,EAAEoB,IAAI,CAACpB,GAAG;UAAEC,GAAG,EAAEmB,IAAI,CAACnB;QAAI;QACzC;QAAA;QACAqB,IAAI,EAAE;UAAEC,GAAG,EAAE,+BAA+B;UAAEC,UAAU,EAAE,IAAIC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC,EAAE,EAAE,EAAE;QAAE;MAAE,GAH3FR,IAAI,CAACS,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIb,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEjB,CAAC;AAAC9B,EAAA,CA7BID,kBAAkB;AAAAgC,EAAA,GAAlBhC,kBAAkB;AA+BxB,eAAeA,kBAAkB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}