{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gongg\\\\my-app\\\\Project React\\\\React-Client\\\\src\\\\components\\\\APIgoogle.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleMapComponent = () => {\n  _s();\n  const [shops, setShops] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3004/shops').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setShops(data);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // Calculate the average latitude and longitude of all shops\n  const averageLat = shops.reduce((sum, shop) => sum + shop.lat, 0) / shops.length;\n  const averageLng = shops.reduce((sum, shop) => sum + shop.lng, 0) / shops.length;\n\n  // Set the center to the average coordinates\n  const center = {\n    lat: isNaN(averageLat) ? 0 : averageLat,\n    lng: isNaN(averageLng) ? 0 : averageLng\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAjKkYqxRTixO9xOe3R6UIULNMQyU7sUGo\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: center,\n      zoom: 10,\n      children: shops.map(shop => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: shop.lat,\n          lng: shop.lng\n        }\n        // Customize marker as needed\n        ,\n        icon: {\n          url: 'path-to-your-marker-image.png',\n          scaledSize: new window.google.maps.Size(30, 30)\n        }\n      }, shop.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n};\n_s(GoogleMapComponent, \"AGMboizx9feJkEUMFKJSK0/MHWk=\");\n_c = GoogleMapComponent;\nexport default GoogleMapComponent;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapComponent\");","map":{"version":3,"names":["GoogleMapComponent","_s","shops","setShops","useState","useEffect","fetch","then","response","ok","Error","json","data","catch","error","console","averageLat","reduce","sum","shop","lat","length","averageLng","lng","center","isNaN","_jsxDEV","LoadScript","googleMapsApiKey","children","GoogleMap","mapContainerStyle","zoom","map","Marker","position","icon","url","scaledSize","window","google","maps","Size","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gongg/my-app/Project React/React-Client/src/components/APIgoogle.jsx"],"sourcesContent":["const GoogleMapComponent = () => {\r\n    const [shops, setShops] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      fetch('http://localhost:3004/shops')\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          setShops(data);\r\n        })\r\n        .catch(error => console.error('Error fetching data:', error));\r\n    }, []);\r\n  \r\n    // Calculate the average latitude and longitude of all shops\r\n    const averageLat = shops.reduce((sum, shop) => sum + shop.lat, 0) / shops.length;\r\n    const averageLng = shops.reduce((sum, shop) => sum + shop.lng, 0) / shops.length;\r\n  \r\n    // Set the center to the average coordinates\r\n    const center = {\r\n      lat: isNaN(averageLat) ? 0 : averageLat,\r\n      lng: isNaN(averageLng) ? 0 : averageLng,\r\n    };\r\n  \r\n    return (\r\n      <LoadScript googleMapsApiKey=\"AIzaSyAjKkYqxRTixO9xOe3R6UIULNMQyU7sUGo\">\r\n        <GoogleMap mapContainerStyle={mapContainerStyle} center={center} zoom={10}>\r\n          {shops.map(shop => (\r\n            <Marker\r\n              key={shop.id}\r\n              position={{ lat: shop.lat, lng: shop.lng }}\r\n              // Customize marker as needed\r\n              icon={{ url: 'path-to-your-marker-image.png', scaledSize: new window.google.maps.Size(30, 30) }}\r\n            />\r\n          ))}\r\n        </GoogleMap>\r\n      </LoadScript>\r\n    );\r\n  };\r\n  \r\n  export default GoogleMapComponent;\r\n  "],"mappings":";;;AAAA,MAAMA,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdC,KAAK,CAAC,6BAA6B,CAAC,CACjCC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZT,QAAQ,CAACS,IAAI,CAAC;IAChB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,UAAU,GAAGd,KAAK,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,CAAC,CAAC,GAAGlB,KAAK,CAACmB,MAAM;EAChF,MAAMC,UAAU,GAAGpB,KAAK,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACI,GAAG,EAAE,CAAC,CAAC,GAAGrB,KAAK,CAACmB,MAAM;;EAEhF;EACA,MAAMG,MAAM,GAAG;IACbJ,GAAG,EAAEK,KAAK,CAACT,UAAU,CAAC,GAAG,CAAC,GAAGA,UAAU;IACvCO,GAAG,EAAEE,KAAK,CAACH,UAAU,CAAC,GAAG,CAAC,GAAGA;EAC/B,CAAC;EAED,oBACEI,OAAA,CAACC,UAAU;IAACC,gBAAgB,EAAC,yCAAyC;IAAAC,QAAA,eACpEH,OAAA,CAACI,SAAS;MAACC,iBAAiB,EAAEA,iBAAkB;MAACP,MAAM,EAAEA,MAAO;MAACQ,IAAI,EAAE,EAAG;MAAAH,QAAA,EACvE3B,KAAK,CAAC+B,GAAG,CAACd,IAAI,iBACbO,OAAA,CAACQ,MAAM;QAELC,QAAQ,EAAE;UAAEf,GAAG,EAAED,IAAI,CAACC,GAAG;UAAEG,GAAG,EAAEJ,IAAI,CAACI;QAAI;QACzC;QAAA;QACAa,IAAI,EAAE;UAAEC,GAAG,EAAE,+BAA+B;UAAEC,UAAU,EAAE,IAAIC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC,EAAE,EAAE,EAAE;QAAE;MAAE,GAH3FvB,IAAI,CAACwB,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIb,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEjB,CAAC;AAAC9C,EAAA,CAzCED,kBAAkB;AAAAgD,EAAA,GAAlBhD,kBAAkB;AA2CtB,eAAeA,kBAAkB;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}