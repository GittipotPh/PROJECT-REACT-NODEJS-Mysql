{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gongg\\\\my-app\\\\Project React\\\\React-Client\\\\src\\\\components\\\\APIgoogle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: '100%',\n  height: '400px'\n};\nconst GoogleMapComponent = () => {\n  _s();\n  const [shops, setShops] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3004/shops').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setShops(data);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // Calculate the average latitude and longitude of all shops\n  const averageLat = shops.reduce((sum, shop) => sum + shop.lat, 0) / shops.length;\n  const averageLng = shops.reduce((sum, shop) => sum + shop.lng, 0) / shops.length;\n\n  // Set the center to the average coordinates\n  const center = {\n    lat: isNaN(averageLat) ? 0 : averageLat,\n    lng: isNaN(averageLng) ? 0 : averageLng\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAjKkYqxRTixO9xOe3R6UIULNMQyU7sUGo\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: center,\n      zoom: 10,\n      children: shops.map(shop => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: shop.lat,\n          lng: shop.lng\n        }\n        // Use a default marker\n      }, shop.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMapComponent, \"AGMboizx9feJkEUMFKJSK0/MHWk=\");\n_c = GoogleMapComponent;\nexport default GoogleMapComponent;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapComponent\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","mapContainerStyle","width","height","GoogleMapComponent","_s","shops","setShops","fetch","then","response","ok","Error","json","data","catch","error","console","averageLat","reduce","sum","shop","lat","length","averageLng","lng","center","isNaN","googleMapsApiKey","children","zoom","map","position","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gongg/my-app/Project React/React-Client/src/components/APIgoogle.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\n\r\nconst mapContainerStyle = { width: '100%', height: '400px' };\r\n\r\nconst GoogleMapComponent = () => {\r\n  const [shops, setShops] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3004/shops')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        setShops(data);\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n  }, []);\r\n\r\n  // Calculate the average latitude and longitude of all shops\r\n  const averageLat = shops.reduce((sum, shop) => sum + shop.lat, 0) / shops.length;\r\n  const averageLng = shops.reduce((sum, shop) => sum + shop.lng, 0) / shops.length;\r\n\r\n  // Set the center to the average coordinates\r\n  const center = {\r\n    lat: isNaN(averageLat) ? 0 : averageLat,\r\n    lng: isNaN(averageLng) ? 0 : averageLng,\r\n  };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"AIzaSyAjKkYqxRTixO9xOe3R6UIULNMQyU7sUGo\">\r\n      <GoogleMap mapContainerStyle={mapContainerStyle} center={center} zoom={10}>\r\n        {shops.map(shop => (\r\n          <Marker\r\n            key={shop.id}\r\n            position={{ lat: shop.lat, lng: shop.lng }}\r\n            // Use a default marker\r\n          />\r\n        ))}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default GoogleMapComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,iBAAiB,GAAG;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE;AAAQ,CAAC;AAE5D,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACda,KAAK,CAAC,6BAA6B,CAAC,CACjCC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZP,QAAQ,CAACO,IAAI,CAAC;IAChB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,UAAU,GAAGZ,KAAK,CAACa,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,CAAC,CAAC,GAAGhB,KAAK,CAACiB,MAAM;EAChF,MAAMC,UAAU,GAAGlB,KAAK,CAACa,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACI,GAAG,EAAE,CAAC,CAAC,GAAGnB,KAAK,CAACiB,MAAM;;EAEhF;EACA,MAAMG,MAAM,GAAG;IACbJ,GAAG,EAAEK,KAAK,CAACT,UAAU,CAAC,GAAG,CAAC,GAAGA,UAAU;IACvCO,GAAG,EAAEE,KAAK,CAACH,UAAU,CAAC,GAAG,CAAC,GAAGA;EAC/B,CAAC;EAED,oBACExB,OAAA,CAACH,UAAU;IAAC+B,gBAAgB,EAAC,yCAAyC;IAAAC,QAAA,eACpE7B,OAAA,CAACJ,SAAS;MAACK,iBAAiB,EAAEA,iBAAkB;MAACyB,MAAM,EAAEA,MAAO;MAACI,IAAI,EAAE,EAAG;MAAAD,QAAA,EACvEvB,KAAK,CAACyB,GAAG,CAACV,IAAI,iBACbrB,OAAA,CAACF,MAAM;QAELkC,QAAQ,EAAE;UAAEV,GAAG,EAAED,IAAI,CAACC,GAAG;UAAEG,GAAG,EAAEJ,IAAI,CAACI;QAAI;QACzC;MAAA,GAFKJ,IAAI,CAACY,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEjB,CAAC;AAAChC,EAAA,CAxCID,kBAAkB;AAAAkC,EAAA,GAAlBlC,kBAAkB;AA0CxB,eAAeA,kBAAkB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}