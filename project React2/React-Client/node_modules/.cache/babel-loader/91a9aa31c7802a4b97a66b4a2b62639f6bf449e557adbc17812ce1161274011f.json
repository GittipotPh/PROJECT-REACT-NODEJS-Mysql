{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst mysql = require('mysql');\nconst axios = require('axios');\nconst cors = require('cors');\nconst app = express();\nconst port = 3004;\napp.use(cors({\n  origin: 'http://localhost:3000',\n  credentials: true\n}));\napp.use((req, res, next) => {\n  console.log(\"Received \".concat(req.method, \" request for \").concat(req.url));\n  next();\n});\napp.use(bodyParser.json());\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'your_new_password',\n  database: 'mydatabase',\n  insecureAuth: true\n});\nconnection.connect(err => {\n  if (err) {\n    console.error('Error connecting to MySQL:', err);\n    return;\n  }\n  console.log('Connected to MySQL');\n});\napp.post('/login', (req, res) => {\n  // Your login logic here\n  res.status(200).json({\n    message: 'Login successful'\n  });\n});\napp.get('/banners', (req, res) => {\n  // Your logic to retrieve banners goes here\n  res.status(200).json({\n    message: 'Banners retrieved successfully'\n  });\n});\napp.post('/register', (req, res) => {\n  const {\n    username,\n    password,\n    email\n  } = req.body;\n  const sql = 'INSERT INTO users (username, password, email) VALUES (?, ?, ?)';\n  connection.query(sql, [username, password, email], (err, result) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send('Internal Server Error');\n    } else {\n      console.log('User registered successfully!');\n      res.status(200).send('User registered successfully!');\n    }\n  });\n});\napp.get('/', (req, res) => {\n  res.send('Hello, this is the root page!');\n});\napp.get('/shops', (req, res) => {\n  // Perform a SELECT query to retrieve shop data from the database\n  const query = 'SELECT * FROM shops';\n  connection.query(query, (err, results) => {\n    if (err) {\n      console.error('Error querying the database:', err);\n      res.status(500).json({\n        error: 'Internal Server Error'\n      });\n    } else {\n      // Send the retrieved shop data as JSON\n      res.json(results);\n    }\n  });\n});\napp.listen(port, () => {\n  console.log(\"Server is running on port \".concat(port));\n});","map":{"version":3,"names":["express","require","bodyParser","mysql","axios","cors","app","port","use","origin","credentials","req","res","next","console","log","concat","method","url","json","connection","createConnection","host","user","password","database","insecureAuth","connect","err","error","post","status","message","get","username","email","body","sql","query","result","send","results","listen"],"sources":["C:/Users/gongg/my-app/Project React/React-Client/src/components/HomePage.jsx"],"sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst mysql = require('mysql');\r\nconst axios = require('axios');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst port = 3004;\r\n\r\napp.use(cors({\r\n  origin: 'http://localhost:3000',\r\n  credentials: true,\r\n}));\r\n\r\napp.use((req, res, next) => {\r\n  console.log(`Received ${req.method} request for ${req.url}`);\r\n  next();\r\n});\r\n\r\napp.use(bodyParser.json());\r\n\r\nconst connection = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: 'your_new_password',\r\n  database: 'mydatabase',\r\n  insecureAuth: true,\r\n});\r\n\r\nconnection.connect(err => {\r\n  if (err) {\r\n    console.error('Error connecting to MySQL:', err);\r\n    return;\r\n  }\r\n  console.log('Connected to MySQL');\r\n});\r\n\r\napp.post('/login', (req, res) => {\r\n  // Your login logic here\r\n  res.status(200).json({ message: 'Login successful' });\r\n});\r\n\r\napp.get('/banners', (req, res) => {\r\n  // Your logic to retrieve banners goes here\r\n  res.status(200).json({ message: 'Banners retrieved successfully' });\r\n});\r\n\r\napp.post('/register', (req, res) => {\r\n  const { username, password, email } = req.body;\r\n\r\n  const sql = 'INSERT INTO users (username, password, email) VALUES (?, ?, ?)';\r\n  connection.query(sql, [username, password, email], (err, result) => {\r\n    if (err) {\r\n      console.error(err);\r\n      res.status(500).send('Internal Server Error');\r\n    } else {\r\n      console.log('User registered successfully!');\r\n      res.status(200).send('User registered successfully!');\r\n    }\r\n  });\r\n});\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('Hello, this is the root page!');\r\n});\r\n\r\napp.get('/shops', (req, res) => {\r\n  // Perform a SELECT query to retrieve shop data from the database\r\n  const query = 'SELECT * FROM shops';\r\n\r\n  connection.query(query, (err, results) => {\r\n    if (err) {\r\n      console.error('Error querying the database:', err);\r\n      res.status(500).json({ error: 'Internal Server Error' });\r\n    } else {\r\n      // Send the retrieved shop data as JSON\r\n      res.json(results);\r\n    }\r\n  });\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}